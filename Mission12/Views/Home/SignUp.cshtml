@{
    ViewData["Title"] = "Sign Up"; <!--Title for the web page-->
}

@* Sign Up Page: This page will display the available times. Ignore the time slots on the
    SignUpGenius page. For our purposes, we will say the tours occur every hour on the
    hour from 8:00 am – 8:00 pm (i.e. the last tour starts at 8:00 pm.) Once the user selects a
    time, they are routed to a form that has the date info set, but allows the user to enter their
    info. *@

@* every hour from 8:00 am – 8:00 pm. Button reroutes to fill in information (form) *@

@*  - we want to find a way to find the current date.
    - then project three months out
    - 
    *@

@*  - make appointment class
    - fill the database 7 appointments 
    - *@

@*@{string[] dayhours = { "8:00 am", "9:00 am", "10:00 am", "11:00 am", "12:00 pm", "1:00 pm", "2:00 pm", "3:00 pm", "4:00 pm", "5:00 pm", "6:00 pm", "7:00 pm", "8:00 pm" };}*@ 

@model TimeSlotsViewModel


<div class="text-center">
    <h1 class="display-4">Sign Up For A Tour</h1> <!--Heading for the web page-->
</div>
@* input, populate table; input, populate new input, populate table; datepicker? table? week view?*@

    <table class="table table-bordered">
        <thead class="font-weight-bold">
            <tr>
                <th>Date</th> <!--Table row headers-->
                <th>Time</th>
            </tr>
        </thead>
    <tbody>
        @foreach (DateTime day in Model.Days) 
        {
            <tr>
                <td>
                    <div class="table-heading">
                        @day.ToShortDateString()
                    </div>
                    <div>
                        (@day.DayOfWeek)
                    </div>
                </td>
                <td>
                    <table class="table table-striped">
                        <tbody>
                            @*
                                Here's what is happening:
                                Loop through each day for the next three months.
                                For each day, loop through the list of possible times. Do not show the time slot if it is preset or past.
                                If there are no available time slots for today, show a message. 
                            *@
                            @{ int validTimes = 0; }
                            @foreach (int time in Model.Times)
                            {
                                if (day.Date != DateTime.Now.Date || time > DateTime.Now.Hour)
                                {
                                    validTimes += 1;
                                    <tr>
                                        <td>
                                            <button asp-controller="Home" asp-action="Form">Test navigation to form!</button>
                                            @*
                                            // This isn't very readable, but it's pretty fun.
                                            // It chooses a prefix (am or pm) and converts 24-hour time to 12-hour time.
                                            *@
                                            @(time < 12 ? $"{time}:00 am" : time == 12 ? $"{time}:00 pm" : $"{time - 12}:00 pm")
                                        </td>
                                    </tr>
                                }
                            }
                            @if (validTimes == 0)
                            {
                            <tr>
                                <td>No valid times for today!</td>
                            </tr>
                            }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
    </tbody>
    </table>


